# backend/core/plugin_api.py

import importlib
import os
import logging
from typing import List, Dict, Any, Callable

logger = logging.getLogger(__name__)
logging.basicConfig(level=logging.INFO)

PLUGIN_FOLDER = os.path.join(os.path.dirname(__file__), "..", "plugins")

class Plugin:
    """
    Base class for all scanner plugins.
    Each plugin must implement the run() method.
    """
    name: str = "GenericPlugin"
    description: str = "A plugin for the web scanner."
    version: str = "1.0"

    def run(self, context: Dict[str, Any]) -> List[Dict[str, Any]]:
        """
        Execute the plugin with the given context.
        
        Args:
            context (Dict[str, Any]): Scanner context including request, response, and metadata.
        
        Returns:
            List[Dict[str, Any]]: A list of findings generated by this plugin.
        """
        raise NotImplementedError("Plugins must implement the run() method.")


class PluginManager:
    """
    Manages loading and executing plugins.
    """
    def __init__(self, plugin_folder: str = PLUGIN_FOLDER):
        self.plugin_folder = plugin_folder
        self.plugins: List[Plugin] = []

    def load_plugins(self):
        """
        Load all Python modules in the plugin folder as plugins.
        """
        if not os.path.exists(self.plugin_folder):
            logger.warning(f"Plugin folder does not exist: {self.plugin_folder}")
            return

        for filename in os.listdir(self.plugin_folder):
            if filename.endswith(".py") and not filename.startswith("__"):
                module_name = filename[:-3]
                module_path = f"plugins.{module_name}"
                try:
                    module = importlib.import_module(module_path)
                    if hasattr(module, "PluginClass"):
                        plugin_instance = module.PluginClass()
                        self.plugins.append(plugin_instance)
                        logger.info(f"Loaded plugin: {plugin_instance.name} v{plugin_instance.version}")
                except Exception as e:
                    logger.error(f"Failed to load plugin {module_name}: {e}")

    def run_plugins(self, context: Dict[str, Any]) -> List[Dict[str, Any]]:
        """
        Execute all loaded plugins and collect their findings.
        """
        findings = []
        for plugin in self.plugins:
            try:
                plugin_findings = plugin.run(context)
                if plugin_findings:
                    findings.extend(plugin_findings)
            except Exception as e:
                logger.error(f"Error running plugin {plugin.name}: {e}")
        return findings
